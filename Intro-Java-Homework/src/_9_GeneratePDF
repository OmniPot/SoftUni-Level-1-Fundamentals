import java.io.FileOutputStream;

// The iText external library is required!

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class _9_GeneratePDF {
	public static String[] generateDeck() {
		String[] faces = new String[] { "2", "3", "4", "5", "6", "7", "8", "9",
				"10", "J", "Q", "K", "A" };
		String[] suits = new String[] { "\u2660", "\u2663", "\u2665", "\u2666" };
		String[] deck = new String[52];
		int count = 0;
		for (int i = 0; i < faces.length; i++) {
			for (int j = 0; j < suits.length; j++) {
				deck[count] = faces[i] + suits[j];
				count++;
			}
		}
		return deck;
	}

	public static void main(String[] args) {
		String[] deck = generateDeck();
		Document doc = new Document();

		try {
			PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(
					"Deck-of-Cards.pdf"));
			doc.open();

			PdfPTable table = new PdfPTable(4);
			table.setWidthPercentage(100);

			BaseFont unicode = BaseFont.createFont(
					"c:/windows/fonts/arialuni.ttf", BaseFont.IDENTITY_H,
					BaseFont.EMBEDDED, true);

			Font black = new Font(unicode, 24, 0, BaseColor.BLACK);
			Font red = new Font(unicode, 24, 0, BaseColor.RED);

			for (int i = 0; i < deck.length; i++) {
				PdfPCell cell;
				String card = deck[i];
				if (card.endsWith("\u2660") || card.endsWith("\u2663")) {
					cell = new PdfPCell(new Paragraph(deck[i], black));
				} else {
					cell = new PdfPCell(new Paragraph(deck[i], red));
				}
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setFixedHeight(180);
				table.addCell(cell);
			}
			doc.add(table);
			doc.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
